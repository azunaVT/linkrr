#!/bin/bash

#Global variables
RED='\033[1;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Functions
echo_italic()
{
  echo -e "\e[3m$@\e[0m"
}

print_help()
{
  echo Usage:	linkrr COMMAND [POSITIONAL_ARGUMENTS]
  echo Commands:
  echo -e "  inspect\tInspect existing hardlinks between two folders."
  echo -e "  mirror\tMirrors hardlinks between two folders into two destination folders while correcting link targets."
  echo -e "  help\t\tPrints this help menu."

  echo Usages:
  echo -n "  inspect "; echo_italic "SOURCE_FILES_FOLDER SOURCE_LINKS_FOLDER DESTINATION_FILES_FOLDER DESTINATION_LINKS_FOLDER"
  echo -n "  mirror "; echo_italic "SOURCE_FILES_FOLDER SOURCE_LINKS_FOLDER DESTINATION_FILES_FOLDER DESTINATION_LINKS_FOLDER"
  echo -e "  help"
}

args_error()
{
  echo -e "Missing or too many arguments. Check the usages by running 'linkrr help'."
  exit 0
}

help()
{
  # Show Help menu action
  if [ "$command" = "help" ] || [ $# -eq 0 ]; then
    print_help
    exit 0
  fi
}

iterate_links()
{
  local SRC_FILES_FOLDER=${1%/}
  local SRC_LINKS_FOLDER=${2%/}
  local DST_FILES_FOLDER=${3%/}
  local DST_LINKS_FOLDER=${4%/}
  HARDLINKS=()
  while IFS=  read -r -d $'\0'; do
      HARDLINKS+=("$REPLY")
  done < <(find $SRC_LINKS_FOLDER -type f -links +1 -print0)

  for LINK in "${HARDLINKS[@]}"
  do
    OIFS="$IFS"
    IFS=$'\n'
    ABS_TARGET=`find $SRC_FILES_FOLDER -samefile $LINK`
    REL_TARGET=$(echo "${ABS_TARGET/${SRC_FILES_FOLDER}\//}")
    REL_LINK=$(echo "${LINK/${SRC_LINKS_FOLDER}\//}")
    "$5" "${SRC_FILES_FOLDER}" "${SRC_LINKS_FOLDER}" "${DST_FILES_FOLDER}" "${DST_LINKS_FOLDER}" "${REL_TARGET}" "${REL_LINK}"
  done
}

mirror()
{
  # Show error message if incorrect number of parameters was entered
  if [ $# -ne 5 ]; then
    args_error
  fi

  # Parse positional parameters
  local SRC_FILES_FOLDER=${2%/}
  local SRC_LINKS_FOLDER=${3%/}
  local DST_FILES_FOLDER=${4%/}
  local DST_LINKS_FOLDER=${5%/}

  echo -e "${GREEN}Creating hardlinks in $DST_LINKS_FOLDER with targets pointing to $DST_FILES_FOLDER${NC}"
  iterate_links $SRC_FILES_FOLDER $SRC_LINKS_FOLDER $DST_FILES_FOLDER $DST_LINKS_FOLDER mirror_link
}

mirror_link()
{
  local SRC_FILES_FOLDER=${1%/}
  local SRC_LINKS_FOLDER=${2%/}
  local DST_FILES_FOLDER=${3%/}
  local DST_LINKS_FOLDER=${4%/}
  local REL_TARGET=${5}
  local REL_LINK=${6}

  local ABS_NEW_LINK="${DST_LINKS_FOLDER}/${REL_LINK}"
  local ABS_NEW_TARGET="${DST_FILES_FOLDER}/${REL_TARGET}"


  echo ${REL_LINK}
  # Skip existing files
  if [ -e "${ABS_NEW_LINK}" ]; then
    echo -e "${RED}Link already exists, overwrite not supported.${NC}"
    return
  fi

  local NEW_LINK_DIR=$(dirname "${ABS_NEW_LINK}")

  if [ ! -d "${NEW_LINK_DIR}" ]; then
    mkdir -p -- "${NEW_LINK_DIR}"
  fi

  echo -e "  Link: ${ABS_NEW_LINK}"
  echo -e "  Target: ${ABS_NEW_TARGET}"

  ln "${ABS_NEW_TARGET}" "${ABS_NEW_LINK}"
  echo ${ABS_NEW_LINK} >> linkrr_$(date +"%Y%m%d").log
}

print_link_changes()
{
  local SRC_FILES_FOLDER=${1%/}
  local SRC_LINKS_FOLDER=${2%/}
  local DST_FILES_FOLDER=${3%/}
  local DST_LINKS_FOLDER=${4%/}
  local REL_TARGET=${5}
  local REL_LINK=${6}

  echo -e "  ${RED}${SRC_LINKS_FOLDER}${NC}/${REL_LINK} -> ${RED}${SRC_FILES_FOLDER}${NC}/${REL_TARGET}"
  echo -e "  ${GREEN}${DST_LINKS_FOLDER}${NC}/${REL_LINK} -> ${GREEN}${DST_FILES_FOLDER}${NC}/${REL_TARGET}"
}

inspect()
{
  if [ $# -ne 5 ]; then
    args_error
  fi

  # Parse positional parameters
  local SRC_FILES_FOLDER=${2%/}
  local SRC_LINKS_FOLDER=${3%/}
  local DST_FILES_FOLDER=${4%/}
  local DST_LINKS_FOLDER=${5%/}

  echo Looking for hardlinks in $SRC_LINKS_FOLDER with targets pointing to $SRC_FILES_FOLDER
  iterate_links $SRC_FILES_FOLDER $SRC_LINKS_FOLDER $DST_FILES_FOLDER $DST_LINKS_FOLDER print_link_changes
}

main()
{
  # Args Validation
  command=$1

  case "$command" in
    mirror) mirror $@;;
    inspect) inspect $@;;
    help) help;;
  esac
}

# Program Execution
cat << EOF
*********************
|      Linkrr       |
*********************
EOF

main $@
